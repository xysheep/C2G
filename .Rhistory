require(flowType)
source("https://bioconductor.org/biocLite.R")
biocLite("flowType")
library(flowType)
data(DLBCLExample)
library(flowType)
source("https://bioconductor.org/biocLite.R")
biocLite("flowType")
libarry(flowType)
library(flowType)
options(useFancyQuotes = FALSE)
library(flowType)
source("https://bioconductor.org/biocLite.R")
biocLite("flowClust")
library(flowType)
library(flowClust)
install.packages("c:\\flowClust_3.14.0.tar.gz", repos=NULL, type="source")
Sys.getenv('path')
a= Sys.getenv('path')
a
names(a)
grep('gsl',a)
grep('gnuWin32',a)
grep('GnuWin32',a)
Sys.getenv('GSL_INC')
Sys.getenv('GSL_LIB')
source("https://bioconductor.org/biocLite.R")
biocLite("flowClust")
source("https://bioconductor.org/biocLite.R")
biocLite("flowClust")
library(flowClust)
source("https://bioconductor.org/biocLite.R")
biocLite("flowClust")
library(flowClust)
source("https://bioconductor.org/biocLite.R")
biocLite("flowClust")
library(flowClust)
flowClust()
flowClust
source("https://bioconductor.org/biocLite.R")
biocLite("RchyOptimyx")
library(RchyOptimyx)
source("https://bioconductor.org/biocLite.R")
biocLite("Flowtype")
biocLite(flowtype)
biocLite('flowtype')
biocLite('FlowType')
biocLite("flowType")
biocLite("flowCL")
source("https://bioconductor.org/biocLite.R")
biocLite("flowCL")
source("https://bioconductor.org/biocLite.R")
biocLite()
setwd
getwd()
setwd("C:/Users/xyang88/OneDrive/MyProject/C2G")
list.dirs()
library(flowType)
source("https://bioconductor.org/biocLite.R")
biocLite("RchyOptimyx")
library(flowType)
data(HIVData)
HIVData
data(HIVMetaData)
View(HIVMetaData)
HIVMetaData <- HIVMetaData[which(HIVMetaData[,'Tube']==2),];
Labels=(HIVMetaData[,2]=='+')+1;
Labels
library(flowCore)
library(OchyOptimyx)
source("https://bioconductor.org/biocLite.R")
biocLite("RchyOptimyx")
library(RchyOptimyx)
PropMarkers <- 5:10
MFIMarkers <- PropMarkers
MarkerNames <- c('Time', 'FSC-A','FSC-H','SSC-A','IgG','CD38','CD19','CD3','CD27','CD20', 'NA', 'NA')
ResList <- fsApply(HIVData, 'flowType', PropMarkers,MFIMarkers, 'kmeans', MarkerNames);
?fsApply
ResList
phenotype.names=unlist(lapply(ResList[[1]]@PhenoCodes,function(x){return(decodePhenotype(x,MarkerNames[PropMarkers],ResList[[1]]@PartitionsPerMarker))}))
phenotype.names
names(ResList[[1]]@PhenoCodes)=phenotype.names
all.proportions <- matrix(0,length(ResList[[1]]@CellFreqs),length(HIVMetaData[,1]))
for (i in 1:length(ResList))
+ all.proportions[,i] = ResList[[i]]@CellFreqs / ResList[[i]]@CellFreqs[1]
for (i in 1:length(ResList))all.proportions[,i] = ResList[[i]]@CellFreqs / ResList[[i]]@CellFreqs[1]
ResList
fsApply
?fsApply
?flowType
data(DLBCLExample)
DLBCLExample
all.proportions
View(all.proportions)
?`RchyOptimyx-package`
?RchyOptimyx
data(DBLCLExample)
data(DLBCLExample)
DLBCLExample
PropMarkers <- 3:5
MFIMarkers <- PropMarkers
MarkerNames <- c('FS', 'SS','CD3','CD5','CD19')
Res <- flowType(DLBCLExample, PropMarkers, MFIMarkers, 'kmeans', MarkerNames);
Res
?flowType
dir(Res)
Res@PartitionsPerMarker
Res@CellFreqs
Res@PhenoCodes
Res@PropMarkers
?flowType
Res@MFIs
?RchyOptimyx

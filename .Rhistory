source("https://bioconductor.org/biocLite.R")
biocLite("flowClust")
source("https://bioconductor.org/biocLite.R")
biocLite("flowType")
install.packages('flowClust_3.14.0.tar.gz')
install.packages('flowClust_3.14.0.tar.gz')
install.packages('flowClust_3.14.0.tar.gz')
install.packages('./flowClust_3.14.0.tar.gz')
install.packages('./flowClust_3.14.0.tar.gz',type='source',repos=NULL)
source("https://bioconductor.org/biocLite.R")
biocLite("RchyOptimyx")
library(RchyOptimyx)
install.packages('./flowClust_3.14.0.tar.gz',type='source',repos=NULL)
install.packages('./flowClust_3.14.0.tar.gz', repos=NUll, type='source')
install.packages('./flowClust_3.14.0.tar.gz', repos=NULL, type='source')
install.packages('./flowClust_3.14.0.tar.gz', repos=NULL, type='source')
?install.packages
source("https://bioconductor.org/biocLite.R")
biocLite("flowClust")
source("https://bioconductor.org/biocLite.R")
biocLite("flowClust")
source("https://bioconductor.org/biocLite.R")
biocLite("RchyOptimyx")
library(RchyOptimyx)
library(flowClust)
flowClust()
flowClust
?flowClust
source("https://bioconductor.org/biocLite.R")
biocLite("SummarizedExperiment")
biocLite()
source("https://bioconductor.org/biocLite.R")
biocLite()
biocLite("SummarizedExperiment")
source("https://bioconductor.org/biocLite.R")
biocLite("SummarizedExperiment")
biocLite('gage')
biocLite('GenomicAlignments')
library(GenomicAlignments)
library(GenomicAlignments)
biocLite('DESeq2')
biocLite('colorRamps')
biocLite('org.Hs.eg.db')
biocLite('annotate')
biocLite('pathview')
source("https://bioconductor.org/biocLite.R")
biocLite("gage")
source("https://bioconductor.org/biocLite.R")
biocLite("preprocessCore")
flowMeans
library(flowType)
library(flowViz)
library(flowCore)
library(flowMeans)
setwd("C:/Users/xyshe/OneDrive/MyProject/c2g")
file.name <- "testdata/ctr.fcs"
d <- read.FCS(file.name, transformation=FALSE)
summary(d)
PropMarkers <- c(3,4,6,8,9,11,12,13,22,24,25,27);
tl <- transformList( featureNames(d)[PropMarkers], arcsinhTransform(b=0.2))
td <- transform(d, tl)
MFIMarkers <- PropMarkers
MarkerNames <- as.character(featureNames(td)[PropMarkers])
summary(td)
Res <- flowType(td, PropMarkers, MFIMarkers, 'flowMeans', MarkerNames)
plot(Res, td)
threshold = Res@Thresholds
View(threshold)
View(threshold)
unlist(threshold)
threshold = unlist(Res@Thresholds)
View(Res)
threshold
as.matrix(threshold)
a = as.matrix(threshold)
a
print(a)
View(a)
a
threshold
